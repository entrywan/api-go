/*
Entrywan API

Manage Entrywan resources programmatically using the API.  All API requests are authenticated using [IAM tokens](https://entrywan.com/docs#iam).  Tokens can be generated and retrieved from the [portal](https://portal.entrywan.com).  The portal itself is an API client that uses an unrestricted token to access resources for an account.  This documentation is generated using an OpenAPI 3.1.0 [specification](https://spec.openapis.org/oas/latest.html).  More information about OpenAPI can be found on its [site](https://openapis.org).  The current version of [Entrywan's API spec](https://entrywan.com/openapi.yaml) is also available for inspection.  On the left of this page are links to the <i>Endpoints</i> grouped by tag and <i>Schemas</i> the API exposes.  <i>Endpoints</i> are URLs that can be accessed with any HTTP client or device. <i>Schemas</i> are machine-readable data models that represent resources.  To learn more, have a look at the [documentation](https://entrywan.com/docs).  If you have any questions, contact [support](mailto:support@entrywan.com) or your account representative.

API version: v1beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstancePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancePostRequest{}

// InstancePostRequest struct for InstancePostRequest
type InstancePostRequest struct {
	// Number of CPU cores
	Cpu int32 `json:"cpu"`
	// Gigabytes (GB) of memory
	Ram int32 `json:"ram"`
	// Hard drive size in gigabytes (GB)
	Disk int32 `json:"disk"`
	// Data center location
	Location string `json:"location"`
	// Initial script to be performed on first boot
	Userdata *string `json:"userdata,omitempty"`
	// Name of ssh key to be planted on instance for root user
	Sshkey string `json:"sshkey"`
	// Name of operating system image
	Os *string `json:"os,omitempty"`
	// Hostname
	Hostname *string `json:"hostname,omitempty"`
}

type _InstancePostRequest InstancePostRequest

// NewInstancePostRequest instantiates a new InstancePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancePostRequest(cpu int32, ram int32, disk int32, location string, sshkey string) *InstancePostRequest {
	this := InstancePostRequest{}
	this.Cpu = cpu
	this.Ram = ram
	this.Disk = disk
	this.Location = location
	this.Sshkey = sshkey
	return &this
}

// NewInstancePostRequestWithDefaults instantiates a new InstancePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancePostRequestWithDefaults() *InstancePostRequest {
	this := InstancePostRequest{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *InstancePostRequest) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *InstancePostRequest) SetCpu(v int32) {
	o.Cpu = v
}

// GetRam returns the Ram field value
func (o *InstancePostRequest) GetRam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetRamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *InstancePostRequest) SetRam(v int32) {
	o.Ram = v
}

// GetDisk returns the Disk field value
func (o *InstancePostRequest) GetDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *InstancePostRequest) SetDisk(v int32) {
	o.Disk = v
}

// GetLocation returns the Location field value
func (o *InstancePostRequest) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *InstancePostRequest) SetLocation(v string) {
	o.Location = v
}

// GetUserdata returns the Userdata field value if set, zero value otherwise.
func (o *InstancePostRequest) GetUserdata() string {
	if o == nil || IsNil(o.Userdata) {
		var ret string
		return ret
	}
	return *o.Userdata
}

// GetUserdataOk returns a tuple with the Userdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetUserdataOk() (*string, bool) {
	if o == nil || IsNil(o.Userdata) {
		return nil, false
	}
	return o.Userdata, true
}

// HasUserdata returns a boolean if a field has been set.
func (o *InstancePostRequest) HasUserdata() bool {
	if o != nil && !IsNil(o.Userdata) {
		return true
	}

	return false
}

// SetUserdata gets a reference to the given string and assigns it to the Userdata field.
func (o *InstancePostRequest) SetUserdata(v string) {
	o.Userdata = &v
}

// GetSshkey returns the Sshkey field value
func (o *InstancePostRequest) GetSshkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sshkey
}

// GetSshkeyOk returns a tuple with the Sshkey field value
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetSshkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sshkey, true
}

// SetSshkey sets field value
func (o *InstancePostRequest) SetSshkey(v string) {
	o.Sshkey = v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *InstancePostRequest) GetOs() string {
	if o == nil || IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetOsOk() (*string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *InstancePostRequest) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *InstancePostRequest) SetOs(v string) {
	o.Os = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *InstancePostRequest) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePostRequest) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *InstancePostRequest) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *InstancePostRequest) SetHostname(v string) {
	o.Hostname = &v
}

func (o InstancePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu"] = o.Cpu
	toSerialize["ram"] = o.Ram
	toSerialize["disk"] = o.Disk
	toSerialize["location"] = o.Location
	if !IsNil(o.Userdata) {
		toSerialize["userdata"] = o.Userdata
	}
	toSerialize["sshkey"] = o.Sshkey
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	return toSerialize, nil
}

func (o *InstancePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"ram",
		"disk",
		"location",
		"sshkey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstancePostRequest := _InstancePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstancePostRequest)

	if err != nil {
		return err
	}

	*o = InstancePostRequest(varInstancePostRequest)

	return err
}

type NullableInstancePostRequest struct {
	value *InstancePostRequest
	isSet bool
}

func (v NullableInstancePostRequest) Get() *InstancePostRequest {
	return v.value
}

func (v *NullableInstancePostRequest) Set(val *InstancePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancePostRequest(val *InstancePostRequest) *NullableInstancePostRequest {
	return &NullableInstancePostRequest{value: val, isSet: true}
}

func (v NullableInstancePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


