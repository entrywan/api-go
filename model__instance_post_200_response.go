/*
Entrywan API

Manage Entrywan resources programmatically using the API.  All API requests are authenticated using [IAM tokens](https://entrywan.com/docs#iam).  Tokens can be generated and retrieved from the [portal](https://portal.entrywan.com).  The portal itself is an API client that uses an unrestricted token to access resources for an account.  This documentation is generated using an OpenAPI 3.1.0 [specification](https://spec.openapis.org/oas/latest.html).  More information about OpenAPI can be found on its [site](https://openapis.org).  The current version of [Entrywan's API spec](https://entrywan.com/openapi.yaml) is also available for inspection.  On the left of this page are links to the <i>Endpoints</i> grouped by tag and <i>Schemas</i> the API exposes.  <i>Endpoints</i> are URLs that can be accessed with any HTTP client or device. <i>Schemas</i> are machine-readable data models that represent resources.  To learn more, have a look at the [documentation](https://entrywan.com/docs).  If you have any questions, contact [support](mailto:support@entrywan.com) or your account representative.

API version: v1beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstancePost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancePost200Response{}

// InstancePost200Response struct for InstancePost200Response
type InstancePost200Response struct {
	State *string `json:"state,omitempty"`
	Id *string `json:"id,omitempty"`
	Ip4 *string `json:"ip4,omitempty"`
}

// NewInstancePost200Response instantiates a new InstancePost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancePost200Response() *InstancePost200Response {
	this := InstancePost200Response{}
	return &this
}

// NewInstancePost200ResponseWithDefaults instantiates a new InstancePost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancePost200ResponseWithDefaults() *InstancePost200Response {
	this := InstancePost200Response{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InstancePost200Response) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePost200Response) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InstancePost200Response) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *InstancePost200Response) SetState(v string) {
	o.State = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstancePost200Response) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePost200Response) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstancePost200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstancePost200Response) SetId(v string) {
	o.Id = &v
}

// GetIp4 returns the Ip4 field value if set, zero value otherwise.
func (o *InstancePost200Response) GetIp4() string {
	if o == nil || IsNil(o.Ip4) {
		var ret string
		return ret
	}
	return *o.Ip4
}

// GetIp4Ok returns a tuple with the Ip4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePost200Response) GetIp4Ok() (*string, bool) {
	if o == nil || IsNil(o.Ip4) {
		return nil, false
	}
	return o.Ip4, true
}

// HasIp4 returns a boolean if a field has been set.
func (o *InstancePost200Response) HasIp4() bool {
	if o != nil && !IsNil(o.Ip4) {
		return true
	}

	return false
}

// SetIp4 gets a reference to the given string and assigns it to the Ip4 field.
func (o *InstancePost200Response) SetIp4(v string) {
	o.Ip4 = &v
}

func (o InstancePost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancePost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ip4) {
		toSerialize["ip4"] = o.Ip4
	}
	return toSerialize, nil
}

type NullableInstancePost200Response struct {
	value *InstancePost200Response
	isSet bool
}

func (v NullableInstancePost200Response) Get() *InstancePost200Response {
	return v.value
}

func (v *NullableInstancePost200Response) Set(val *InstancePost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancePost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancePost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancePost200Response(val *InstancePost200Response) *NullableInstancePost200Response {
	return &NullableInstancePost200Response{value: val, isSet: true}
}

func (v NullableInstancePost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancePost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


